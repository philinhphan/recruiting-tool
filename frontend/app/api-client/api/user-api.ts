/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { OfferingRequest } from '../models';
// @ts-ignore
import type { Question } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserBase } from '../models';
// @ts-ignore
import type { UserUpdate } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserBase} userBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost: async (userBase: UserBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userBase' is not null or undefined
            assertParamExists('createUserUserPost', 'userBase', userBase)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download By Id
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadByIdFileFidGet: async (fid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('downloadByIdFileFidGet', 'fid', fid)
            const localVarPath = `/file/{fid}`
                .replace(`{${"fid"}}`, encodeURIComponent(String(fid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadByUserUserUidFileGet: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('downloadByUserUserUidFileGet', 'uid', uid)
            const localVarPath = `/user/{uid}/file`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Offerings By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferingsByUserUserUidOfferingsGet: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getOfferingsByUserUserUidOfferingsGet', 'uid', uid)
            const localVarPath = `/user/{uid}/offerings`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Question By User
         * @param {string} uid 
         * @param {number} qid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionByUserUserUidQuestionQidGet: async (uid: string, qid: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getQuestionByUserUserUidQuestionQidGet', 'uid', uid)
            // verify required parameter 'qid' is not null or undefined
            assertParamExists('getQuestionByUserUserUidQuestionQidGet', 'qid', qid)
            const localVarPath = `/user/{uid}/question/{qid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"qid"}}`, encodeURIComponent(String(qid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUserUidGet: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserByIdUserUidGet', 'uid', uid)
            const localVarPath = `/user/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Userinfo By File
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserinfoByFileFileFidUserdataGet: async (fid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('getUserinfoByFileFileFidUserdataGet', 'fid', fid)
            const localVarPath = `/file/{fid}/userdata`
                .replace(`{${"fid"}}`, encodeURIComponent(String(fid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Question By User
         * @param {string} uid 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuestionByUserUserUidQuestionPost: async (uid: string, question: Question, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('postQuestionByUserUserUidQuestionPost', 'uid', uid)
            // verify required parameter 'question' is not null or undefined
            assertParamExists('postQuestionByUserUserUidQuestionPost', 'question', question)
            const localVarPath = `/user/{uid}/question`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(question, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {string} uid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUserUidPatch: async (uid: string, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserUserUidPatch', 'uid', uid)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserUserUidPatch', 'userUpdate', userUpdate)
            const localVarPath = `/user/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFilePost', 'file', file)
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserBase} userBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUserPost(userBase: UserBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUserPost(userBase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download By Id
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadByIdFileFidGet(fid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadByIdFileFidGet(fid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.downloadByIdFileFidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadByUserUserUidFileGet(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadByUserUserUidFileGet(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.downloadByUserUserUidFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Offerings By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfferingsByUserUserUidOfferingsGet(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferingRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfferingsByUserUserUidOfferingsGet(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getOfferingsByUserUserUidOfferingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Question By User
         * @param {string} uid 
         * @param {number} qid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionByUserUserUidQuestionQidGet(uid: string, qid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionByUserUserUidQuestionQidGet(uid, qid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getQuestionByUserUserUidQuestionQidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdUserUidGet(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdUserUidGet(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserByIdUserUidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Userinfo By File
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserinfoByFileFileFidUserdataGet(fid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserinfoByFileFileFidUserdataGet(fid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserinfoByFileFileFidUserdataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Post Question By User
         * @param {string} uid 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQuestionByUserUserUidQuestionPost(uid: string, question: Question, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postQuestionByUserUserUidQuestionPost(uid, question, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.postQuestionByUserUserUidQuestionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {string} uid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUserUidPatch(uid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUserUidPatch(uid, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUserUserUidPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.uploadFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserBase} userBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost(userBase: UserBase, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.createUserUserPost(userBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download By Id
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadByIdFileFidGet(fid: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.downloadByIdFileFidGet(fid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadByUserUserUidFileGet(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.downloadByUserUserUidFileGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Offerings By User
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferingsByUserUserUidOfferingsGet(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<OfferingRequest> {
            return localVarFp.getOfferingsByUserUserUidOfferingsGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Question By User
         * @param {string} uid 
         * @param {number} qid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionByUserUserUidQuestionQidGet(uid: string, qid: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getQuestionByUserUserUidQuestionQidGet(uid, qid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUserUidGet(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserByIdUserUidGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Userinfo By File
         * @param {string} fid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserinfoByFileFileFidUserdataGet(fid: string, options?: RawAxiosRequestConfig): AxiosPromise<UserBase> {
            return localVarFp.getUserinfoByFileFileFidUserdataGet(fid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Question By User
         * @param {string} uid 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuestionByUserUserUidQuestionPost(uid: string, question: Question, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postQuestionByUserUserUidQuestionPost(uid, question, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {string} uid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUserUidPatch(uid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateUserUserUidPatch(uid, userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadFilePost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {UserBase} userBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserUserPost(userBase: UserBase, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserUserPost(userBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download By Id
     * @param {string} fid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public downloadByIdFileFidGet(fid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).downloadByIdFileFidGet(fid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download By User
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public downloadByUserUserUidFileGet(uid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).downloadByUserUserUidFileGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Offerings By User
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOfferingsByUserUserUidOfferingsGet(uid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getOfferingsByUserUserUidOfferingsGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Question By User
     * @param {string} uid 
     * @param {number} qid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getQuestionByUserUserUidQuestionQidGet(uid: string, qid: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getQuestionByUserUserUidQuestionQidGet(uid, qid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User By Id
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByIdUserUidGet(uid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByIdUserUidGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Userinfo By File
     * @param {string} fid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserinfoByFileFileFidUserdataGet(fid: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserinfoByFileFileFidUserdataGet(fid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Question By User
     * @param {string} uid 
     * @param {Question} question 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postQuestionByUserUserUidQuestionPost(uid: string, question: Question, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).postQuestionByUserUserUidQuestionPost(uid, question, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {string} uid 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserUserUidPatch(uid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserUserUidPatch(uid, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public uploadFilePost(file: File, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).uploadFilePost(file, options).then((request) => request(this.axios, this.basePath));
    }
}

